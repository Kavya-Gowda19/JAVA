
1.----------------------------------------------------Leap Year-------------------------------------------------------------------------------------------------------
package com.pack;
import java.util.*;
public class LeapYear {

	public static void main(String[] args) {
		// TODO Auto-generated method stub                // condition 1.divisible by 400
		Scanner s=new Scanner(System.in);                              2.divisible by 4 and not by 100
		int x;
		System.out.println("Enter the year");
		x=s.nextInt();
		if(x%4==0 && x%100!=0) {
		System.out.println("leap year");
		}
		else if(x%400==0) {
			System.out.println("leap year");	
		}
		else {
			System.out.println("Not leap year");
		}
	}
}



2.----------------------------------------Reverse  of  Intger array-------------------------------------------------------------------------------------------------------
//revers a given array
import java.util.*;
public class Reverse {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner s=new Scanner(System.in);
        System.out.println("Enter the number of array");
        int n=s.nextInt();
        int a[]=new int [n];
        System.out.println("Enter the  array elements");
        for(int i=0;i<n;i++){
            a[i]=s.nextInt();
        }
        int res[]=new int[a.length];
        int temp=0;
        for(int i=a.length-1;i>=0;i--) {
            res[temp]=a[i];	//1st position to resultant array res[0]=a[6]
            temp++;             //temp increment assigns next value in res array
        }
        System.out.println("The arry before reversing:");
        for(Integer i: a) {
            System.out.print(i+" " );
        }
        System.out.println();
        System.out.println("The arry After reversing:");
        for(Integer i: res) {
            System.out.print(i+" " );
        }

    }
}

3.--------------------------------------------------------Reverse of String-------------------------------------------------------------------------------------------------------
 import java.util.Scanner;
public class ReverseString{
    public static void main (String args []){
        Scanner s=new Scanner(System.in);
        System.out.println("Enter the String");
        String str=s.nextLine();
        String str_temp="";
        for(int i=str.length()-1;i>=0;i--) {
            str_temp = str_temp + str.charAt(i);
        }
            System.out.println(" the Reverse String :"+ str_temp);

        }
    }

4..-----------------------------------------------------Bubble sort-------------------------------------------------------------------------------------------------------
import java.util.*;
public class BubbleSort {
    public static void main(String args[]){
       Scanner s=new Scanner(System.in);
        System.out.println("Enter the number of array");
        int n=s.nextInt();
        int a[]=new int [n];
        System.out.println("Enter the  array elements");
        for(int i=0;i<n;i++){
            a[i]=s.nextInt();
        }
        int min=0;
        int max=0;
        int temp=0;
        for(int i=0;i<a.length-1;i++){
            for(int j=i+1;j<a.length;j++){
                if(a[i]>a[j]){
                    temp=a[i];
                    a[i]=a[j];
                    a[j]=temp;
                }
            }
        }
        for(Integer i :a){
            System.out.print(i+" ");
        }
        System.out.println();
        System.out.println("-------------");
        System.out.println("The minimum element is: "+a[0]);
        System.out.println("The maximum element is: "+a[a.length-1]);
    }
}
 5.--------------------------------LinearSearch to find the specific elemnts-------------------------------------------------------------------------------------------------------
import java.util.Scanner;
public class LinearSearch {
    public static void main(String args[]){
        Scanner s=new Scanner(System.in);
        int a[]={2,3,56,78,43,789,33,100,67,78};
        System.out.println("Enter the element");
        int key =s.nextInt();
        for(int i=0;i<a.length;i++){
            if(key==a[i]){
                System.out.println("Key is found at position "+ i);
                System.exit(0);                                         //System.exit(0) terminates the program when it finds a missing letter,
            }
        }
        System.out.println("Key is not found at position ");

    }
}

6..----------------Keerti is the owner of the educational instition named as ajna group of Insstitute under Ajna group of institution---------------------------------
keerti has constructed three colleges each for medical and enginerring.one the acdedmic admission is completed in all this colleges 
keerti want to want is the revenue made by each college ad also  she wanted to check the what is the overall revenue made by ajna group of 
institution ,despite the same using revelent programing technique

package Arrays;
import java.util.Scanner;
public class Array2 {
public static void main(String[] args) {
		// TODO Auto-generated method stub
  Scanner s=new Scanner(System.in);
  System.out.println("Enter the number of wings under ajna group of institutions :");
  int wing=s.nextInt();
  System.out.println("Enter the number of colleges constructed by keerti under each wing :");
  int col=s.nextInt();
  //create 2 d array
   int  arr[][]=new int[20][20];
   long overall_revenue=0;
   for(int i=0;i<wing;i++) {
	   System.out.println("Inside the wing number: "+(i+1));
	   for(int j=0;j<arr[i].length;j++) {
		   System.out.println("Enter Revenue made by college number: "+(j+1));  
		   arr[i][j]=s.nextInt();
		   overall_revenue+=arr[i][j];
	   }	   
   }
   System.out.println("------------------");
   //didsplay data
   for(int i=0;i<wing;i++) {
	   System.out.println("Inside the wing number: "+(i+1));
	   for(int j=0;j<arr[i].length;j++) {
		   System.out.println("The Revenue made by college number: "+(j+1)+"is"+arr[i][j]);     
		   overall_revenue+=arr[i][j];
	   }
	   System.out.println("------------------");
	   System.out.println("Overall revenue made by keerti's ajna group of institute: "+ overall_revenue);	   
	}
	}
}
 
7.------------------------------------------------Panagram Program-------------------------------------------------------------------------------------------------------
public class AlphabetParagram {
    public static void main(String arg[]) {
       
        char arr[] = {'a','b','c','d','e','f','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};

        int res[] = new int[26]; // By default, all values are 0

        for (int i = 0; i < arr.length; i++) {
            int temp = arr[i] - 'a'; // Find the index for the letter
            res[temp] = 1; // Mark letter as present
        }

        // Check if all letters are present
        for (int i = 0; i < res.length; i++) {
            if (res[i] != 1) {
                System.out.println("This array does not contain all the alphabets of English.");
                return; // Exit method instead of System.exit(0) for better practice
            }
        }

        System.out.println("This array contains all the alphabets of English.");
    }
}

8.--------------------------------------Palindrome String-------------------------------------------------------------------------------------------------------
 import java.util.Scanner;
public class Palindrome{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the string");
        String str = sc.nextLine();

        String str_temp = "";
        for (int i = str.length() - 1; i >= 0; i--) {
            str_temp = str_temp + str.charAt(i);// each char of word
        }

        if (str.equals(str_temp) == true) {
            System.out.println("The string is palindrome");
        } else {
            System.out.println("The string is not a palindrome");
        }
    }
}
9.--------------------------------------Palindrome Number-------------------------------------------------------------------------------------------------------
 import java.util.Scanner;
public class PalindromeNumber {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number");
        int reserve =0;;
        int n = sc.nextInt();
        int original = n;
        while (n > 0) {
            int digit = n % 10;
            reserve = reserve * 10 + digit;
            n = n / 10;
        }
            if (original == reserve) {
                System.out.println("It is palindrome");
            } else {
                System.out.println("It is not palindrome");
            }

    }
}

10--------------------------------------------------------------Prime Number---------------------------------------------------------------------------------------------

import java.util.Scanner;
public class PrimeNumber{
    public static void main(String args[]){
        Scanner s=new Scanner(System.in);
        System.out.println("Enter the number");
        int n=s.nextInt();
        boolean flag=false;  //use flase lower case
        if(n==0||n==1){
            flag =true;
        }
        for(int i=0;i<=Math.sqrt(n);i++){
            if(n%2==0){
                flag=true;
                break;
            }
            }
        if(flag == true){
            System.out.println("Number is not prime");
        }else{
            System.out.println("Number is prime");
        }
    }
}

11.-----------------------------------------------Fibonacii using recurssion---------------------------------------------------------------------------------------------

The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.
The recursive function follows a depth-first approach—it keeps going down until it reaches the base case and then comes back up, summing values as it returns.
0, 1, 1, 2, 3, 5, 8, 13, 21, ... )


0+1=1,1+1=2
fib(4)=fib(3)+fib(2)=2+1=3
fib(3)=fib(2)+fib(1)=1+1=2
fib(2)=fib(1)+fib(0)=1
fib(1)=1
fib(0)=0

import java.util.Scanner;
public class Fibonaccis {
    public  static int Fibonaci(int n) {
        if(n==0){
            return 0;
        }
        else if (n==1){
            return 1;
        }
        else{
            int res= Fibonaci(n-1)+Fibonaci(n-2);
            return res;
        }

    }

    public static void main (String args[]){
        Scanner s=new Scanner(System.in);
        System.out.println("Enter the number");
        int n=s.nextInt();

        int res= Fibonaci(n);
        System.out.println(res);

    }
}

12.------------------------------------------------MinMax using Library---------------------------------------------------------------------------------------------
   
   import java.util.*;
   public class MaxMin{
   public static void main (String args[]){
   Scanner s=new Scanner(System.in);
   System.out.println("Enter the number of elements");
   int n=s.nextInt();
   int a[]=new int[n];
   System.out.println("Enter the  elements");
   for(int i=0;i<n;i++){
    System.out.println(a[i]);
     }
   Arrays.sort(a);
  System.out.println("Smallest Element " + a[i]);
  System.out.println("largest elements " + a[a.length-1]);
}}

13.------------------------------------------------Matrix Addition---------------------------------------------------------------------------------------------
  
import java.util.*;
public class MatrixAddition {
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the size");
        int k = s.nextInt();
        int m[][] = new int[k][k];
        int n[][] = new int[k][k];
        int res[][] = new int[k][k];
        System.out.println("Enter elements of matrix m");
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                m[i][j] = s.nextInt();
            }
        }
        System.out.println("Enter elements of matrix n");
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                n[i][j] = s.nextInt();
            }
        }
        //perform opertation
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                res[i][j] = m[i][j] + n[i][j];
            }
        }
        System.out.println("Resultant Matrix ");
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                System.out.print(res[i][j]+" ");
            }
            System.out.println();
        }
    }
}

14.------------------------------------------------Matrix Multiplication---------------------------------------------------------------------------------------------
package pack.com;
import java.util.Scanner;

public class MatrixMultiplication {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        System.out.println("Enter rows and columns for first matrix:");
        int r1 = s.nextInt();
        int c1 = s.nextInt();

        System.out.println("Enter rows and columns for second matrix:");
        int r2 = s.nextInt();
        int c2 = s.nextInt();

        // Check if multiplication is possible
        if (c1 != r2) {
            System.out.println("Matrix multiplication not possible! Columns of first matrix must equal rows of second matrix.");
            return;
        }

        int[][] m1 = new int[r1][c1];
        int[][] m2 = new int[r2][c2];
        int[][] res = new int[r1][c2]; // Resultant matrix will be of size r1 × c2

        System.out.println("Enter elements of first matrix:");
        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c1; j++) {
                m1[i][j] = s.nextInt();
            }
        }

        System.out.println("Enter elements of second matrix:");
        for (int i = 0; i < r2; i++) {
            for (int j = 0; j < c2; j++) {
                m2[i][j] = s.nextInt();
            }
        }

        // Matrix multiplication
        for (int i = 0; i < r1; i++) { 
            for (int j = 0; j < c2; j++) { 
                res[i][j] = 0; 
                for (int k = 0; k < c1; k++) { // Use c1 (or r2, both are equal)
                    res[i][j] += m1[i][k] * m2[k][j]; 
                }
            }
        }

        System.out.println("Resultant Matrix:");
        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c2; j++) {
                System.out.print(res[i][j] + " ");
            }
            System.out.println();
        }

        s.close();
    }
}

15.------------------------------------------------Anagram------------------------------------------------------------------------------------------------------------
  Anagrams are words or phrases formed by rearranging the letters of another word or phrase. For example:
  eg:  Listen → Silent,Debit card → Bad credit
step1:Collet the string
step2:create 2 string which is having the size same as the 2 strings provoided the strings have same size else directly prints that the are
     string are not anagram 
step3:Traverse the string and store the characters into array
step4:sort the aray using bubble sort 
step5:compare the two string
//anagram built in funtion
package com.string;
import java.util.Arrays;
import java.util.Scanner;
public class anagrams {
	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		//step-1
		System.out.println("enter the first string:  ");
		String str1= sc.next();
		System.out.println("enter the second string:  ");
		String str2= sc.next();
		System.out.println("----------");
		//step-2
		if(str1.length()==str2.length()) { 
			char c1[]=str1.toCharArray();
			char c2[]=str2.toCharArray();
		//step-3
		for(int i=0;i<str1.length();i++) {
			c1[i]=str1.charAt(i);
			c2[i]=str2.charAt(i);
		}
		//step-4
		//sorting array c1
		Arrays.sort(c1);
		Arrays.sort(c2);
		//step-5
		if (Arrays.equals(c1,c2)==true) {
			System.out.println("the strings are anagrams");
		}
			else {
				System.out.println("the strings are not anagrams");
			}
		}
		else {
			System.out.println("the strings are not anagrams");
		}
	}	
	}
// Anagram
package com.string;

import java.util.Scanner;
class sorting{
	char [] sort(char c[]) {
		char temp;
		for (int i=0;i<c.length-1;i++) {
			for (int j=i+1;j<c.length;j++) {
			if(c[i]>c[j]) {
				temp=c[i];
				c[i]=c[j];
				c[j]=temp;
			}
			
		}
		
	}
	return c;
}
}
public class anagramswithoutbuiltin {

	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		//step-1
				System.out.println("enter the first string:  ");
				String str1= sc.next();
				System.out.println("enter the second string:  ");
				String str2= sc.next();
				System.out.println("----------");
				//step-2
				if(str1.length()==str2.length()) { 
					char c1[]=new char[str1.length()];
					char c2[]=new char[str2.length()];
				//step-3
				for(int i=0;i<str1.length();i++) {
					c1[i]=str1.charAt(i);
					c2[i]=str2.charAt(i);
				}
				//step-4
				//sorting array c1
		sorting s = new sorting();
		c1 =s.sort(c1);
		//sorting arrayc2
		c2 = s.sort(c2);
		for(Character c : c1) {
			System.out.print(c+" ");
		}
		System.out.println();
			System.out.println("------");
			for(Character c : c1) {
				System.out.print(c+" ");
			}
			System.out.println();
				System.out.println("------");
		//step-5
				for(int i=0;i<c1.length;i++) {
					if (c1[i]!=c2[i]) {
						System.out.println("the strings are not anagrams");
						System.exit(0);
					}
				}
				System.out.println("the strings are  anagrams");
				}
	}
}

14.--------------------------------------------------------HCF-LCM---------------------------------------------------------------------------------------------
LCM (Least Common Multiple): The LCM of two numbers is the smallest positive integer which is divisible by both numbers.
HCF (Highest common Factor)/GCD: HCF is also known as Greatest common divisor, HCF of two numbers is the largest positive integer that divides both the numbers.
****LCM=num1*num2/HCF
-> Example :Find HCF of 12 and 18
Step 1: Find factors   Factors of 12 → 1, 2, 3, 4, 6, 12       or 28->2,7,2
                       Factors of 18 → 1, 2, 3, 6, 9, 18       or 12->3,2,2
Step 2: Identify common factors
                       Common factors = 1, 2, 3, 6             ommon Factor=2*2 =4
Step 3: Pick the highest
                       HCF = 6
-> Using Prime Factorization
    1.Find the prime factorization of both numbers.
    2.Take the highest power of each prime factor.
    3.Multiply them to get LCM.
  
Example: Find LCM of 8 and 12
             8 = 2³
             12 = 2² × 3
             Take highest powers: 2³ * 3 = 24  LCM(8,12) = 24
 imp:somehow 1 is common factor keeps on checking one is cf or 2 is cf ... keep upadting to highest cf ---------------------------------------------------------------------------
                                                                                                            0       1       2     3     ........ m(small no)      n(small no)

import java.util.Scanner;
public class HcfLcm {
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the number1 : ");
        int n1=s.nextInt();
        System.out.println("Enter the numbre2 : ");
        int n2=s.nextInt();
        int min;   //  int min=math.min(n1,n2); built in function
        if(n1>n2){
            min=n1;
        }
        else{
            min=n2;
        }
        int hcf=0;
        for(int i=1;i<=min;i++){
            if((n1%i==0) &&(n2%i==0)){
                 hcf=i;
            }
        }
        System.out.println("The hcf/gcd is"+ hcf);
        int lcm=(n1*n2)/hcf;
        System.out.println("The lcm is"+ lcm);
    }
}

15.-------------------------------------------------------Armstrong---------------------------------------------------------------------------------------------

An Armstrong number is a positive integer that is equal to the sum of its own digits each raised to the power of the number of digitoriginal
153 = (1*1*1)+(5*5*5)+(3*3*3) 
9474=(9*9*9*9)+(4*4*4*4)+(7*7*7*7)+(4*4*4*4)

import java.util.Scanner;
public class Armstrong {
    public static void main(String args []){
        Scanner s=new Scanner(System.in);
        System.out.println("Enter the number");
        int n=s.nextInt();
        int original=n;
        int sum=0;
        while(n>0){
            int r=n%10;
            n=n/10;
            sum=sum+ r*r*r;
        }
        if(original==sum){
            System.out.println("Number is Armstrong");
        }
        else{
            System.out.println("Number is  not armstrong");
        }
    }
}
16.------------------------------------------------VowelConsanant---------------------------------------------------------------------------------------------
 import java.util.*;
public class Vowel {
    public static void main (String args[]){
        Scanner s=new Scanner(System.in);
        String str;
        System.out.println("Enter the String:");
        str=s.nextLine().toLowerCase();
         int vowel_count=0;
        int consonant_count=0;
        for(int i=0;i<str.length();i++){
            if(str.charAt(i)>=97 && str.charAt(i)<=122) { ///ascii values are needed when needed to count specific character
                if (str.charAt(i) == 'a' || str.charAt(i) == 'i' || str.charAt(i) == 'e' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {
                    vowel_count++;
                } else {
                    consonant_count++;
                }
            }

            }
        System.out.println("the String length :"+ str.length());
        System.out.println("the number of vowel:"+vowel_count);
        System.out.println("the number of consonant"+consonant_count);
        }

    }


  //VowelConsanant special replace
import java.util.*;
public class VoweSpecial {

    public static void main (String args[]){
        Scanner s=new Scanner(System.in);
        String str;
        System.out.println("Enter the String:");
        str=s.nextLine().toLowerCase();
        String str_temp= "";
        int vowel_count=0;
        int consonant_count=0;
        for(int i=0;i<str.length();i++) {
            if (str.charAt(i) >= 97 && str.charAt(i) <= 122) {
                if (str.charAt(i) == 'a' || str.charAt(i) == 'i' || str.charAt(i) == 'e' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {
                   str_temp+='$';
                } else {
                    str_temp+='&';
                }
            }
            else{
                str_temp+=str.charAt(i);
            }

        }
        System.out.println("Repled String  :"+ str_temp);
    }}
16.------------------------------------------------greatest of two number or 3 number---------------------------------------------------------------------------------------------
     import java.util.Scanner;
    public class GreatestNo{
    public static void main(String args[]){
        Scanner s=new Scanner(System.in);
        System.out.println("Enter the First Number");
        int n1=s.nextInt();
        System.out.println("Enter the Second Number");
        int n2=s.nextInt();
        System.out.println("Enter the Third Number");
        int n3=s.nextInt();
        if(n1>=n2 && n1>=n3){
            System.out.println("Lagerest Number Is :" +n1);
        }
        else if(n2>=n1 && n2>=n3){
            System.out.println("Lagerest Number Is :" +n2);
        }
        else{
            System.out.println("Lagerest Number Is :" +n3);
        } } }

17.--------------------------------------------------Transpose Of Matrixs---------------------------------------------------------------------------------------------
  
The transpose of a matrix is obtained by swapping rows with columns.
   a=[2,3]       b=[2,4]
     [4,7]         [3,7]
   If an original matrix is of order m × n (rows × columns),
   the transposed matrix will be of order n × m (columns × rows).


  import java.util.Scanner;
  public class TransposeMatrix {
  public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the number of rows");
        int r=s.nextInt();
        System.out.println("Enter the number of columns");
        int c=s.nextInt();
        int m[][] = new int[r][c];
        System.out.println("Enter the elements");
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                m[i][j]=s.nextInt();
            }
        }
        System.out.println("The Transpose matrix is ");
        for(int i=0;i<c;i++){
            for(int j=0;j<r;j++){
                System.out.print(m[j][i]+ " "); // important just m[i][j]----> m[j][i]
            }
            System.out.println();
        }

    }
}
18.------------------------------------------------Count Digits---------------------------------------------------------------------------------------------
import java.util.Scanner;
public class CountNo {
int  digit(int n){
    int count=0;
    while(n>0) {
        n = n / 10;
        count+=1;
    }
    return count ;
}
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the number");
        int n=s.nextInt();
        CountNo d=new CountNo();
        System.out.println("the number of digits :"+d.digit(n));
    }
}

18.------------------------------------------------Factorial---------------------------------------------------------------------------------------------
-factoril of 0 and 1 is 1
-formula n*fact(n-1)
//recurssion

import java.util.Scanner;
public class Factorial {
    static int fact(int n){
        if(n==0||n==1){
            return 1;
        }
        return n * fact(n-1);


    }
    public static void main (String args[]){
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the number");
        int n=s.nextInt();
        System.out.println("Factorial is "+ Factorial.fact(n));

    }
}
// itterative method
   import java.util.Scanner;
public class Factorial {
    static int fact(int n){
        int res=1;
        for(int i=1;i<=n;i++ ){
            res=res*i;
        }
    return res;

    }
    public static void main (String args[]){
        Scanner s = new Scanner(System.in);
        System.out.println("Enter the number");
        int n=s.nextInt();
        System.out.println("Factorial is "+ Factorial.fact(n));

    }
}







19.------------------------------------------------Swapping Lowercase and uppercase---------------------------------------------------------------------------------------------





  










//prime number is which is divisible  by 1 and itself 
//0 and 1 are not prime
//leaving 2 all other even numner can be divide by 2
//Factors of 12 : all numbers that divide 12 exactly 1,2,3,4,6
  example 2: 2,1     ✅ Yes
          4: 2,4,1   ❌ No
//static and non static keyword in the method
  Don’t use static if the method needs to work with instance variables or objects.
  1. static in Methods
     When a method is declared as static, it means:
       -It belongs to the class and not to any specific object.
       -You can call it without creating an object.
       -It cannot directly access non-static (instance) variables or methods
             class Example {
             static void greet() {  // ✅ Static method
             System.out.println("Hello, world!");
             }
             public static void main(String[] args) {
             greet(); // ✅ Called without an object
             }
             }
    2.non static in methods
      Why Not Always Use static?
         -If a method needs to access instance variables or methods, it should NOT be static.
         -static methods cannot use this keyword because they don’t belong to an object
              class Example {
              int x = 10;  // Instance variable
              void show() {  // ❌ Cannot be static because it accesses x
              System.out.println("Value of x: " + x);
             }
             public static void main(String[] args) {
             Example obj = new Example(); // ✅ Create object
             obj.show(); // ✅ Call non-static method
             }
             }














//------------Tap1 Module1
//------------Tower Of Hanoi

//------------transpose Of Matrix
//------------find sum of GP series
//------------Missing Number
//------------greatest of two number or 3 number
//------------find sum of of GP series
//-----------Diagonal of a Matrix
//-----------Checking number is power of 2
//-----------number is perfect squre


-----------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE:
Array:
1.Array is an collection of homogenus element
2.Can't directly store integers and strings in the same array .we use an Object array in Java
        Object arr[] = {10, "hello", 3.14}
        String names[] = {"Alice", "Bob", "Charlie"};
        Int a[]=new int[n];  or in a[]={2,4,5,7};
3.  Loop through the array                    
     for (String name : names) {                  for(Interger i: a){
     System.out.println(name); }                  System.out.println(i)}
4.To run java Program           javac array.java
                                java array
5.a.length()

String
1.str.AtChar(i) -> specific character
2.













Difference Between if, while, and do-while in Java
Feature	            if Statement	                         while Loop	                               do-while Loop
Purpose	            Executes a block of code once if the     Repeats the block of code while        Executes the block of code at least once,
                    condition is true.	                     the condition is true.	            then repeats while the condition is true.
Condition Check     Checked once before execution.	     Checked before each iteration.	    Checked after each iteration.
Minimum Execution   0 or 1 time (if condition is false,      0 or more times (if the condition is   At least once (it executes once even if the
                    it doesn’t execute).	             false initially, it won’t execute)     condition is false).
Exit Control	    No looping (Executes once, then exits).  Pre-test loop (condition is checked    Post-test loop (condition is checked after
                                                             before execution).	                    execution).
Syntax	           if (condition) { ... }	             while (condition) { ... }	            do { ... } while (condition);
Use Case	   When you need to execute a block          When you need to execute a block only  When you need to execute a block at least once
                   based on a condition but not repeatedly   if the condition is true.	            before checking the condition.




















































